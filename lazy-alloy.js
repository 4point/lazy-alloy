// Generated by CoffeeScript 1.3.3
var Application, Compiler, coffee, fs, glob, jade, path, sty;

fs = require("fs");

path = require("path");

glob = require("glob");

coffee = require("coffee-script");

jade = require("jade");

sty = require('sty');

console.info = function(msg) {
  return console.log(sty.red(msg));
};

console.debug = function(msg) {
  return console.log(sty.green(msg));
};

Application = (function() {

  function Application() {
    this.program = require('commander');
    this.compiler = new Compiler();
    this.program.version('0.0.1').option('-c, --compile', 'Just compile.').option('-w, --watch', 'Watch file changes & compile.').option('-p, --platform [platform]', 'Run titanium on `platform`').parse(process.argv);
    if (this.program.compile) {
      return this.compile();
    }
    if (this.program.watch) {
      return this.watch();
    }
    if (this.program.platform) {
      return this.build();
    }
    console.info("nothing to do.. zzz");
  }

  Application.prototype.compile = function() {
    return this.compiler.all();
  };

  Application.prototype.build = function() {
    var exec, sh, sys;
    sys = require("sys");
    exec = require("child_process").exec;
    sh = "titanium build -p " + this.program.platform;
    console.log(sh);
    return exec(sh, function(error, stdout, stderr) {
      return sys.puts(stdout);
    });
  };

  Application.prototype.watch = function() {
    var watchr,
      _this = this;
    watchr = require("watchr");
    console.info("Waiting for file change...");
    watchr.watch({
      paths: [__dirname],
      listeners: {
        error: function(err) {
          return console.log("an error occured:", err);
        },
        change: function(changeType, filePath, fileCurrentStat, filePreviousStat) {
          var file;
          if (changeType !== "create" && changeType !== "update") {
            return;
          }
          file = _this._getFileType(filePath);
          if (!file) {
            return;
          }
          _this.compiler.files([filePath], file.fromTo[0], file.fromTo[1]);
          if (_this.program.platform) {
            return _this.build();
          }
        }
      }
    });
    return {
      next: function(err, watchers) {
        if (err) {
          return console.log("watching everything failed with error", err);
        } else {
          return console.debug("Waiting for file change...");
        }
      }
    };
  };

  Application.prototype._getFileType = function(path) {
    var inpath;
    inpath = function(name) {
      return !!~path.indexOf(name);
    };
    if (inpath(".jade")) {
      return {
        type: "view",
        fromTo: ["jade", "xml"]
      };
    }
    if (!inpath(".coffee")) {
      return null;
    }
    if (inpath("controllers/")) {
      return {
        type: "controller",
        fromTo: ["coffee", "js"]
      };
    }
    if (inpath("styles/")) {
      return {
        type: "style",
        fromTo: ["coffee", "tss"]
      };
    }
  };

  return Application;

})();

Compiler = (function() {

  function Compiler() {}

  Compiler.prototype.logger = console;

  Compiler.prototype.views = function() {
    return this.process("/**/views/*.jade", "jade", "xml");
  };

  Compiler.prototype.controllers = function() {
    return this.process("/**/controllers/*.coffee", "coffee", "js");
  };

  Compiler.prototype.styles = function() {
    return this.process("/**/styles/*.coffee", "coffee", "tss");
  };

  Compiler.prototype.all = function() {
    this.views();
    this.controllers();
    return this.styles();
  };

  Compiler.prototype.process = function(path, from, to) {
    this.logger.info("Preprocessing " + from + " files in [project_root]" + (path.replace("/**", "/app")));
    return this.files(glob.sync(path, {
      cwd: __dirname,
      root: __dirname,
      nosort: true,
      nonull: false
    }), from, to);
  };

  Compiler.prototype.file = function(from, output, type) {
    var compiled, data;
    this.logger.debug("Building " + type + ": " + from + " --> " + output);
    data = fs.readFileSync(from, 'utf8');
    compiled = this.build[type](data);
    return fs.writeFileSync(output, compiled, 'utf8');
  };

  Compiler.prototype.files = function(files, from, to) {
    var file, filenameWithNewExt, _i, _len, _results;
    if (files.length === 0) {
      return this.logger.debug("No '*." + from + "' files need to preprocess.. " + files.length + " files");
    }
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (!!~file.indexOf("lazyalloy")) {
        break;
      }
      filenameWithNewExt = file.substring(0, file.length - from.length).toString() + ("" + to);
      _results.push(this.file(file, filenameWithNewExt, to));
    }
    return _results;
  };

  Compiler.prototype.build = {
    xml: function(data) {
      return jade.compile(data, {
        pretty: true
      })(this);
    },
    tss: function(data) {
      data = this.js(data);
      return (data.replace("};", "")).replace("var tss;\n\ntss = {\n", "");
    },
    js: function(data) {
      return coffee.compile(data.toString(), {
        bare: true
      });
    }
  };

  return Compiler;

})();

module.exports = new Application;
